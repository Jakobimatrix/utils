name: C/C++ CI

permissions:
  contents: read
  checks: write

on:
  push:
    branches: [ main, dev, master, release ]
  pull_request:
    branches: [ main, dev, master, release ]

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Create workspace tar (exclude .git and IDE stuff)
        run: |
          set -e
          touch workspace.tar
          touch workspace.tar.gz
          tar --exclude='workspace.tar.gz' --exclude='workspace.tar' --exclude-vcs --exclude='**/.idea' --exclude='**/.vscode' --exclude='**/*.log' -cf workspace.tar .
          tar --append -f workspace.tar .git
          gzip -f workspace.tar

      - uses: actions/upload-artifact@v4
        with:
          name: workspace
          path: workspace.tar.gz
          retention-days: 1
          
      - name: Make sure scripts exist
        run: |
          set -e
          source initRepo/.environment || exit 1
          source initRepo/scripts/ensureToolVersion.sh || exit 1


  shellcheck:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      failed: ${{ steps.shell_result.outputs.failed }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - run: |
          set -e
          tar -xzf workspace.tar.gz -C .
          sudo apt-get update
          sudo apt-get install -y shellcheck
          ./initRepo/scripts/checkShellCheck.sh

  doxygenHeader:
    runs-on: ubuntu-latest
    needs: setup
    outputs:
      failed: ${{ steps.shell_result.outputs.failed }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - run: |
          set -e
          tar -xzf workspace.tar.gz -C .
          ./initRepo/scripts/checkFileHeaders.sh
          
  clang_format:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
          
      - name: Cache APT packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('initRepo/.environment') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - run: |
          set -e
          tar -xzf workspace.tar.gz -C .
          source initRepo/.environment
          if [ -f .environment ]; then source .environment; fi
          sudo apt-get install -y clang-format-${CLANG_FORMAT_VERSION}
          source initRepo/scripts/ensureToolVersion.sh
          ensure_tool_versioned clang-format "${CLANG_FORMAT_VERSION}"
          ./initRepo/scripts/checkClangFormat.sh

  doxygen-docs:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - run: |
          set -e
          tar -xzf workspace.tar.gz -C .
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz
          sudo apt-get install -y texlive-latex-base texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended

          # Run Doxygen (expects a Doxyfile in repo root or adjust path)
          ./initRepo/scripts/createDokumentation.sh

          tar -czf docu_${{ github.event.repository.name }}.tar.gz -C doxygen .

      - name: Upload Doxygen documentation
        uses: actions/upload-artifact@v4
        with:
          name: docu_${{ github.event.repository.name }}
          path: docu_${{ github.event.repository.name }}.tar.gz
          retention-days: 1 

      - name: Doxygen in summary
        run: |
          echo "## Doxygen >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "You can download the Doxygen documentation from the workflow artifacts." >> $GITHUB_STEP_SUMMARY


  build:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [debug, release]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .
      
      - run: |
          set -e
          tar -xzf workspace.tar.gz -C .
          source initRepo/.environment
          if [ -f .environment ]; then source .environment; fi
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get update
            sudo apt-get install -y gcc-${GCC_VERSION} g++-${GCC_VERSION}
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_VERSION} 100
            sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${GCC_VERSION} 100
            source initRepo/scripts/ensureToolVersion.sh
            ensure_tool_versioned g++ "${GCC_VERSION}"
            ensure_tool_versioned gcc "${GCC_VERSION}"
          else
            sudo apt-get install -y clang-${CLANG_VERSION} lld
            if ! command -v ld.lld &>/dev/null; then
                sudo ln -s /usr/bin/ld.lld-${CLANG_VERSION} /usr/bin/ld.lld || true
            fi
            sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${CLANG_VERSION} 100
            sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${CLANG_VERSION} 100
            source initRepo/scripts/ensureToolVersion.sh
            ensure_tool_versioned clang++ "${CLANG_VERSION}"
            ensure_tool_versioned clang "${CLANG_VERSION}"
          fi
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            if [ "${{ matrix.build_type }}" = "debug" ]; then
                ./initRepo/scripts/build.sh -d -t -g --compiler gcc
            else
                ./initRepo/scripts/build.sh -r -t --compiler gcc
            fi
            tar -czf gcc_${{ matrix.build_type }}_build.tar.gz build-gcc-${GCC_VERSION}-${{ matrix.build_type }}
          else [ "${{ matrix.compiler }}" = "clang" ]
            ./initRepo/scripts/build.sh --${{ matrix.build_type }} -f --compiler clang 
            ./initRepo/scripts/build.sh --${{ matrix.build_type }} -t --compiler clang
            tar -czf clang_${{ matrix.build_type }}_build.tar.gz build-clang-${CLANG_VERSION}-${{ matrix.build_type }}
          fi

      - name: Upload build artifact
        if: matrix.compiler != 'clang-fuzzer'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.compiler }}-${{ matrix.build_type }}-build
          path: ${{ matrix.compiler }}_${{ matrix.build_type }}_build.tar.gz
          retention-days: 1


  gcc_unit_tests_and_coverage:
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    strategy:
      matrix:
        build_type: [debug, release]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - uses: actions/download-artifact@v4
        with:
          name: gcc-${{ matrix.build_type }}-build
          path: .

      - run: |
          set -e
          tar -xzf workspace.tar.gz -C .
          tar -xzf gcc_${{ matrix.build_type }}_build.tar.gz -C .
          source initRepo/.environment
          if [ -f .environment ]; then source .environment; fi
          echo "GCC_VERSION=$GCC_VERSION" >> $GITHUB_ENV
          if [ "${{ matrix.build_type }}" = "debug" ]; then
            sudo apt-get update
            sudo apt-get install -y gcovr lcov
          fi
          ./initRepo/scripts/build.sh -s -T --${{ matrix.build_type }} -J --compiler gcc  # skip cmake and build + run Tests in Junit format output

      - name: Publish GCC test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: |
            build-gcc-${{ env.GCC_VERSION }}-${{ matrix.build_type }}/test_results.xml
            
      - name: Generate coverage report
        if: matrix.build_type == 'debug'
        run: |
          gcovr --gcov-executable gcov-${{ env.GCC_VERSION }} \
              -r . build-gcc-${{ env.GCC_VERSION }}-debug/src \
              --exclude '.*_deps/.*' --gcov-ignore-parse-errors \
              --xml-pretty -o coverage.xml

      - name: Publish coverage summary
        if: matrix.build_type == 'debug'
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          format: markdown
          output: file
          
      - name: Append coverage to summary # workaround: publish-unit-test-result-action overwrites the summary
        if: matrix.build_type == 'debug'
        run: |
          echo "## Code Coverage" >> $GITHUB_STEP_SUMMARY
          cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
          
          
  clang_unit_tests:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        build_type: [debug, release]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - uses: actions/download-artifact@v4
        with:
          name: clang-${{ matrix.build_type }}-build
          path: .

      - run: |
          set -e
          tar -xzf workspace.tar.gz -C .
          tar -xzf clang_${{ matrix.build_type }}_build.tar.gz -C .
          source initRepo/.environment
          if [ -f .environment ]; then source .environment; fi
          echo "CLANG_VERSION=$CLANG_VERSION" >> $GITHUB_ENV
          ./initRepo/scripts/build.sh -s -T --${{ matrix.build_type }} -J --compiler clang

      - name: Publish Clang test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: |
            build-clang-${{ env.CLANG_VERSION }}-${{ matrix.build_type }}/test_results.xml


  clang_tidy:
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: workspace
          path: .

      - uses: actions/download-artifact@v4
        with:
          name: clang-debug-build
          path: .
          
          
      - run: |
          set -e
          tar -xzf workspace.tar.gz -C .
          tar -xzf clang_debug_build.tar.gz -C .
          source initRepo/.environment
          if [ -f .environment ]; then source .environment; fi
          sudo apt-get install -y clang-tidy-${CLANG_TIDY_VERSION}
          source initRepo/scripts/ensureToolVersion.sh
          ensure_tool_versioned clang-tidy "${CLANG_TIDY_VERSION}"

      - name: tidy_result
        run: |
          set -e
          ./initRepo/scripts/checkClangTidy.sh
          
